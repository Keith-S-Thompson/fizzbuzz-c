#!/bin/sh

git=false
strict=false
tests=""
clang=false
icx=false
musl=false
tcc=false
standard=-std=c11

for arg in "$@" ; do
    if [ "$arg" = "-git" ] ; then
        git=true
    elif [ "$arg" = "-strict" ] ; then
        strict=true
    elif [ "$arg" = "-clang" ] ; then
        clang=true
    elif [ "$arg" = "-icx" ] ; then
        icx=true
    elif [ "$arg" = "-musl" ] ; then
        musl=true
    elif [ "$arg" = "-tcc" ] ; then
        tcc=true
    elif [ "$arg" = "-c90" ] ; then
        standard=-std=c90
    elif [ "$arg" = "-c99" ] ; then
        standard=-std=c99
    elif [ "$arg" = "-c11" ] ; then
        standard=-std=c11
    elif [ "$arg" = "-c17" ] ; then
        standard=-std=c17
    elif [ -f "$arg" ] ; then
        tests="$tests $arg"
    else
        echo "Usage: $0 [-git] [-strict] [-clang] [-icx] [-c90|-c99|-c11|-c17]" 1>&2
        exit 1
    fi
done

if $clang ; then
    CC=clang
elif $icx ; then
    CC=icx
elif $musl ; then
    CC=musl-gcc
elif $tcc ; then
    CC=tcc
else
    CC=gcc
fi

if ! $tcc ; then
    if $strict ; then
        CFLAGS="$standard -pedantic-errors -Wall -Wextra -O3"
    else
        CFLAGS="$standard -Wno-format-extra-args"
    fi
fi

# if $clang && ! $strict ; then
#     CFLAGS="$CFLAGS -Wno-logical-op-parentheses"
# fi

if [ ! "$tests" ] ; then
    if $git ; then 
        tests=$(git ls-files 'fizzbuzz[0-9][0-9][0-9].c')
    else
        tests=fizzbuzz[0-9][0-9][0-9].c
    fi
fi

ok=true
failures=''
count=0
for file in $tests ; do
    echo -n .
    count=`expr $count + 1`
    if [ `expr $count % 50` -eq 0 ] ; then
        echo ''
    fi
    exe=`basename $file .c`
    out=`basename $file .c`.out
    if [ "$file" = "fizzbuzz007.c" ] ; then
        $CC $CFLAGS -Wno-logical-op-parentheses $file -o $exe
    elif [ "$file" = "fizzbuzz026.c" ] ; then
        $CC $CFLAGS -Wno-logical-op-parentheses $file -o $exe
    elif [ "$file" = "fizzbuzz027.c" ] || [ "$file" = "fizzbuzz068.c" ] ; then
        if [ "$CC" = "tcc" ] ; then
            $CC $CFLAGS -lpthread $file -o $exe
        else
            $CC $CFLAGS -pthread $file -o $exe
        fi
    elif [ "$file" = "fizzbuzz064.c" ] ; then
        $CC $CFLAGS -Wno-multichar $file -o $exe
    elif [ "$file" = "fizzbuzz076.c" ] ; then
        $CC $CFLAGS $file -o $exe -lgmp
    elif [ "$file" = "fizzbuzz106.c" ] ; then
        $CC $CFLAGS $file -o $exe < fizzbuzz001.c
    elif [ "$file" = "fizzbuzz107.c" ] ; then
        # icx (Intel's compiler) treats \ characters on its command
        # line differently than other compilers.
        if [ "$CC" = "icx" ] ; then
            newline='\\n'
        else
            newline='\n'
        fi
        $CC $CFLAGS \
            -DLINE02='int main(void) {' \
            -DLINE03='    for (int i = 1; i <= 100; i ++) {' \
            -DLINE04='        if (i % 15 == 0) {' \
            -DLINE05='            puts("FizzBuzz");' \
            -DLINE06='        }' \
            -DLINE07='        else if (i % 3 == 0) {' \
            -DLINE08='            puts("Fizz");' \
            -DLINE09='        }' \
            -DLINE10='        else if (i % 5 == 0) {' \
            -DLINE11='            puts("Buzz");' \
            -DLINE12='        }' \
            -DLINE13='        else {' \
            -DLINE14='            printf("%d'"$newline"'", i);' \
            -DLINE15='        }' \
            -DLINE16='    }' \
            -DLINE17='}' \
            $file -o $exe
    elif [ "$file" = "fizzbuzz119.c" ] ; then
        $CC $CFLAGS $file -o $exe -lm
    else
        $CC $CFLAGS $file -o $exe
    fi
    ./$exe >$out
    if ! cmp -s $out expected-output.txt ; then
        ok=false
        failures="$failures $file"
    fi
    rm -f $exe $out
done
if [ `expr $count % 50` -ne 0 ] ; then
    echo ''
fi

if $ok ; then
    echo OK
else
    echo Failures: $failures
    exit 1
fi

